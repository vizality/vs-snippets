{
  "Vizality Plugin": {
    "prefix": ["vzp", "vzplug", "vz-plugin"],
    "description": "Creates a Vizality plugin class scaffold.",
    "body": [
      "import { Plugin } from '@vizality/entities';",
      "",
      "export default class ${1:${TM_DIRECTORY/(.*plugins\\\\)(.*)/${2:/pascalcase}/}} extends Plugin {",
      "  start () {",
      "    $0",
      "  }",
      "",
      "  stop () {",
      "     ",
      "  }",
      "}"
    ]
  },
  "Vizality Settings Functional Component": {
    "prefix": ["vzs", "vzset", "vz-settings"],
    "description": "Creates a Vizality plugin settings functional component scaffold.",
    "body": [
      "import React, { memo } from 'react';",
      "import { $1 } from '@vizality/components/settings');",
      "",
      "export default memo(({ getSetting, updateSetting, toggleSetting }) => {",
      "  return (",
      "    $0",
      "  );",
      "});",
      ""
    ]
  },
  "Vizality Injection": {
    "prefix": ["vzi", "vzinj", "vz-inject"],
    "description": "Creates a function injection scaffold.",
    "body": [
      "patch('${1:patchId}', ${2:module}, '${4:functionName}', (args, res) => {",
      "  $0",
      "",
      "  return res;",
      "});"
    ]
  },
  "Vizality Webpack": {
    "prefix": ["vzw", "vzweb", "vz-webpack"],
    "description": "Imports Vizality's webpack module.",
    "body": ["import { getModule } from '@vizality/webpack';$0"]
  },
  "Vizality Components": {
    "prefix": ["vzc", "vzcomp", "vz-component"],
    "description": "Imports Vizality's components module.",
    "body": ["import { $1 } from '@vizality/components';$0"]
  },
  "Vizality Constants": {
    "prefix": ["vzcn", "vzconst", "vz-constant"],
    "description": "Imports Vizality's constants module.",
    "body": ["import { $1 } from '@vizality/constants';$0"]
  },
  "Vizality Discord": {
    "prefix": ["vzd", "vzdisc", "vz-discord"],
    "description": "Imports Vizality's discord module.",
    "body": ["import { $1 } from '@vizality/discord';$0"]
  },
  "Vizality HTTP": {
    "prefix": ["vzh", "vzhttp", "vz-http"],
    "description": "Imports Vizality's http module.",
    "body": ["import { get } from '@vizality/http';$0"]
  },
  "Vizality i18n": {
    "prefix": ["vz18", "vzi18n", "vz-i18n"],
    "description": "Imports Vizality's i18n module.",
    "body": ["import { Messages } from '@vizality/i18n';$0"]
  },
  "Vizality React": {
    "prefix": ["vzr", "vzreact", "vz-react"],
    "description": "Imports react module.",
    "body": ["import React from 'react';$0"]
  },
  "Vizality React with Memo": {
    "prefix": "vzrm",
    "description": "Imports React module with memo.",
    "body": ["import React, { memo } from 'react';$0"]
  },
  "Vizality Utilities": {
    "prefix": ["vzu", "vzutil", "vz-util"],
    "description": "Imports Vizality's util module.",
    "body": ["import { $1 } from '@vizality/util';$0"]
  },
  "Get Functional Component by displayName": {
    "prefix": "vzgfc",
    "body": [
      "const ${1:displayName} = getModule(m => m.default?.displayName === '${1:displayName}');$0"
    ]
  },
  "React Functional Component": {
    "prefix": "vzfc",
    "description": "Sets up your file as if you were starting a functional component.",
    "body": [
      "import React, { memo } from 'react';",
      "",
      "export default memo(props => {",
      "  const { $1 } = props;",
      "  return (",
      "    $0",
      "  );",
      "});",
      ""
    ]
  },
  "Get Webpack Module by Properties": {
    "prefix": "vzgm",
    "body": [
      "const { ${1:property} } = getModule('${1:filter}');",
      "$0"
    ]
  },
  "Get Webpack Module by Display Name": {
    "prefix": "vzgmd",
    "body": [
      "const ${1:displayName} = getModuleByDisplayName('${1:displayName}');",
      "$0"
    ]
  },
  "React Class Component": {
    "prefix": "vzcc",
    "description": "Sets up your file as if you were starting a functional component.",
    "body": [
      "import React, { Component } from 'react';",
      "",
      "export default class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} extends Component {",
      "  render () {",
      "    return (",
      "      <div>",
      "        $0",
      "      </div>",
      "    );",
      "  }",
      "}",
      ""
    ]
  },
  "useState": {
    "prefix": ["vzus", "vz-state"],
    "description": "Sets up a React useState hook.",
		"body": [
			"const [ ${1}, set${1/(.*)/${1:/capitalize}/} ] = useState($2);$0"
		]
	}
}
